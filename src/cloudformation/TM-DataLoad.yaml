# TM-DataLoad.yaml
#
# Author: GMind LLC
# Date: 03/12/2020

Parameters:
  ProjectName:
    Type: String
    Default: TMDataLoad
    Description: Name of the project to be used in naming everything else

  MyApi:
    Type: String
    Default: noiyewfm5g
    Description: API Gateway Api ID

  RootResource:
    Type: String
    Default: lvn9upjw11
    Description: API Gateway Root Resource ID

Resources:
  LambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub LambdaExecRole${ProjectName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: GrantSendReceiveMessage
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sqs:*
                Resource: !Sub arn:aws:sqs:*:*:${ProjectName}*

  AddJobFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-add-job
      Description: Adds a scrape job
      Handler: add-job.lambda_handler
      Role: !GetAtt LambdaExecRole.Arn
      Code:
        ZipFile: 'import json'
      Runtime: python3.7
      Timeout: 10

  ProcessJobFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-process-job
      Description: Process a scrape job
      Handler: process-job.lambda_handler
      Role: !GetAtt LambdaExecRole.Arn
      Code:
        ZipFile: 'import json'
      Runtime: python3.7
      Timeout: 600
      MemorySize: 1024

  Permission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AddJobFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/*/*

  Resource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyApi
      ParentId: !Ref RootResource
      PathPart: 'tourneymachine'

  PostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: False
      AuthorizationType: NONE
      #      AuthorizerId: !Ref Authorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/'
            - !GetAtt AddJobFunction.Arn
            - '/invocations' # :${stageVariables.lambdaAlias}
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
      ResourceId: !Ref Resource
      RestApiId: !Ref MyApi

  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyApi
      ResourceId: !Ref Resource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ProjectName}
      VisibilityTimeout: 600

  ProcessJobFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      MaximumRetryAttempts: 0
      MaximumRecordAgeInSeconds: 30
      Enabled: true
      EventSourceArn: !GetAtt Queue.Arn
      FunctionName: !GetAtt ProcessJobFunction.Arn

Outputs:
  QueueURL:
    Description: 'URL of SQS Queue'
    Value: !Ref Queue
  QueueARN:
    Description: 'ARN of SQS Queue'
    Value: !GetAtt Queue.Arn
